{"version":3,"sources":["hooks/use-input.js","components/SimpleInput.js","App.js","index.js"],"names":["useInput","validateValue","useState","enteredValue","setEnteredValue","isTouched","setIsTouched","valueIsValid","value","isValid","hasError","valueChangeHandler","event","target","inputBlurHandler","reset","SimpleInput","props","trim","enteredName","enteredNameIsValid","nameInputHasError","nameChangedHandler","nameBlurHandler","resetNameInput","includes","enteredEmail","enteredEmailIsValid","emailInputHasError","emailChangeHandler","emailBlurHandler","resetEmailInput","formIsValid","nameInputClasses","emailInputClasses","onSubmit","preventDefault","console","log","className","htmlFor","type","id","onChange","onBlur","disabled","App","ReactDOM","render","document","getElementById"],"mappings":"mLAgCeA,EA9BE,SAACC,GAChB,MAAwCC,mBAAS,IAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAEMC,EAAeN,EAAcE,GAgBnC,MAAO,CACLK,MAAOL,EACPM,QAASF,EACTG,UAlBgBH,GAAgBF,EAmBhCM,mBAjByB,SAACC,GAC1BR,EAAgBQ,EAAMC,OAAOL,QAiB7BM,iBAduB,SAACF,GACxBN,GAAa,IAcbS,MAXY,WACZX,EAAgB,IAChBE,GAAa,M,OCqEFU,EAtFK,SAACC,GAKnB,MAOIjB,GAAS,SAACQ,GAAD,MAA4B,KAAjBA,EAAMU,UANrBC,EADT,EACEX,MACSY,EAFX,EAEEX,QACUY,EAHZ,EAGEX,SACoBY,EAJtB,EAIEX,mBACkBY,EALpB,EAKET,iBACOU,EANT,EAMET,MAGF,EAOIf,GAAS,SAACQ,GAAD,OAAWA,EAAMiB,SAAS,QAN9BC,EADT,EACElB,MACSmB,EAFX,EAEElB,QACUmB,EAHZ,EAGElB,SACoBmB,EAJtB,EAIElB,mBACkBmB,EALpB,EAKEhB,iBACOiB,EANT,EAMEhB,MAGEiB,GAAc,EAEdZ,GAAsBO,IACxBK,GAAc,GAGhB,IAcMC,EAAmBZ,EACrB,uBACA,eAEEa,EAAoBN,EACtB,uBACA,eAEJ,OACE,uBAAMO,SAvBsB,SAACvB,GAC7BA,EAAMwB,iBAEDhB,IAILiB,QAAQC,IAAInB,GAGZK,IACAO,MAYA,UACE,sBAAKQ,UAAWN,EAAhB,UACE,uBAAOO,QAAQ,OAAf,uBACA,uBACEC,KAAK,OACLC,GAAG,OACHC,SAAUrB,EACVsB,OAAQrB,EACRf,MAAOW,IAERE,GACC,mBAAGkB,UAAU,aAAb,wCAGJ,sBAAKA,UAAWL,EAAhB,UACE,uBAAOM,QAAQ,QAAf,yBACA,uBACEC,KAAK,QACLC,GAAG,QACHC,SAAUd,EACVe,OAAQd,EACRtB,MAAOkB,IAERE,GACC,mBAAGW,UAAU,aAAb,4CAGJ,qBAAKA,UAAU,eAAf,SACE,wBAAQM,UAAWb,EAAnB,0BCxEOc,MARf,WACE,OACE,qBAAKP,UAAU,MAAf,SACE,cAAC,EAAD,OCANQ,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,U","file":"static/js/main.8524eafb.chunk.js","sourcesContent":["import { useState } from 'react';\n\nconst useInput = (validateValue) => {\n  const [enteredValue, setEnteredValue] = useState('');\n  const [isTouched, setIsTouched] = useState(false);\n\n  const valueIsValid = validateValue(enteredValue);\n  const hasError = !valueIsValid && isTouched;\n\n  const valueChangeHandler = (event) => {\n    setEnteredValue(event.target.value);\n  };\n\n  const inputBlurHandler = (event) => {\n    setIsTouched(true);\n  };\n\n  const reset = () => {\n    setEnteredValue('');\n    setIsTouched(false);\n  };\n\n  return {\n    value: enteredValue,\n    isValid: valueIsValid,\n    hasError,\n    valueChangeHandler,\n    inputBlurHandler,\n    reset\n  };\n};\n\nexport default useInput;\n","import useInput from '../hooks/use-input';\n\nconst SimpleInput = (props) => {\n  \n  //use custom hook 'useInput' where we pass values and functions which are returned from this custom hook  \n  //we also pass anonymous function (value => value.trim() !== '') as input parameter to useInput hook \n  //where this anonymous function is called as validateValue\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangedHandler,\n    inputBlurHandler: nameBlurHandler,\n    reset: resetNameInput,\n  } = useInput((value) => value.trim() !== '');\n  \n  const {\n    value: enteredEmail,\n    isValid: enteredEmailIsValid,\n    hasError: emailInputHasError,\n    valueChangeHandler: emailChangeHandler,\n    inputBlurHandler: emailBlurHandler,\n    reset: resetEmailInput,\n  } = useInput((value) => value.includes('@'));\n\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  }\n\n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n\n    if (!enteredNameIsValid) {\n      return;\n    }\n\n    console.log(enteredName);\n\n    // nameInputRef.current.value = ''; => NOT IDEAL, DON'T MANIPULATE THE DOM\n    resetNameInput();\n    resetEmailInput();\n  };\n\n  const nameInputClasses = nameInputHasError\n    ? 'form-control invalid'\n    : 'form-control';\n\n  const emailInputClasses = emailInputHasError\n    ? 'form-control invalid'\n    : 'form-control';\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input\n          type='text'\n          id='name'\n          onChange={nameChangedHandler}\n          onBlur={nameBlurHandler}\n          value={enteredName}\n        />\n        {nameInputHasError && (\n          <p className='error-text'>Name must not be empty.</p>\n        )}\n      </div>\n      <div className={emailInputClasses}>\n        <label htmlFor='email'>Your E-Mail</label>\n        <input\n          type='email'\n          id='email'\n          onChange={emailChangeHandler}\n          onBlur={emailBlurHandler}\n          value={enteredEmail}\n        />\n        {emailInputHasError && (\n          <p className='error-text'>Please enter a valid email.</p>\n        )}\n      </div>\n      <div className='form-actions'>\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n","import SimpleInput from './components/SimpleInput';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <SimpleInput />\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}